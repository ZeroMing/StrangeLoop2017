     "Rebuilding the Cathedral"
    by Nadia Eghbal
    
    
    ALEX:  Good morning, everyone!  Welcome back to Strange Loop.
     AUDIENCE:  (Whoops and hollers)
    >> I don't have too many announcements this morning. I know people probably saw shirts on the way in, I know we told people we were out of mediums but we found a large box of more of them. I also mentioned on the announcements that Adam savage will be -- I'll be interviewing him, asking him questions on the stage during the latter part of that, so if you have questions for Adam, please drop them in the Ask Adam room in Slack and I will be happy to put those into some good form to ask Adam, and then also pictures are starting to show up on the Flickr account and I put the link for that in the announcements and the videos from yesterday are mostly rendered at this point and those will start going up today, as well, and I think that's most of it for the announcements. Our keynote speaker this morning is someone that I sort of started tracking a couple of years ago. I think obviously we're all pretty heavily impacted by open source. In my day job, I work on Clojure and do open source work there, so it's a subject that has affected my livelihood for a number of years. I used to work on another open source project called Terracotta, and I was really intrigued by the things that our speaker was talking about, because it seemed like she was not the at the surface level, she was trying to dig deep in into what a fundamental shift has happened in our industry in open source and how that's affected people in jobs and all those sorts of things, so I think she has gathered a lot of information and data and really interesting stuff about that. So it is my pleasure to introduce, Nadia Eghbal.
    [applause]
    
    >> Hi, everyone, thank you for having me. So today I'd like to reexamine some assumptions about how open source gets built, how we think open source gets built, and what is and isn't working. I'll be honest I wrote this talk for me as much as I wrote it for you. I've been researching open source communities for a couple of years now and I came into this problem as an outsider. I'm not an open source developer, I'm just interested in learning how open source gets funded and supported and what was good about that early on was that it kept my mind open to possibilities. Because I didn't have a background in open source, I couldn't look for how things have always been for answers, but a couple of years a year that's been deep in the weeds at GitHub, I feel myself giving automatic answers to things instead of questioning their underlying assumptions. So I was excited to write this talk because I wanted to challenge my thinking about what open source could be and I decided to explore that with you today. So to start off and to describe some of the tensions that we're seeing with open source today, I wanted to start with some of the frustration you experienced if you ever tried to make an open source submission.
     You open a PR, you submit your requested changes and you're excited because you made a difference to this project. And then you wait, and you wait and you wait, and then you kind of forget about it. But one day you're cleaning out your notifications and' kinda like, huh, whatever happened to that PR? You check it out.
    It's still open. Nobody's ever responded except some other person who's also asking, what's the holdup here? And then you wait a little longer and more people pile on, asking what's taking so long, but still you don't get a response from the project itself.
    And you're like, fine, that's cool and all. I didn't need that contribution, but also, what the heck? Isn't this open source? Don't these projects want contributions? And so it's possible they just didn't like your contribution or maybe the project just isn't actively being developed anymore, but another thing that might be happening is this: Maybe your contribution got lost in a sea of hundreds of unanswered issues and pull requests that are piling onto an inbox and in turn their guilty conscience. Maybe. And so open source maintainers are fighting this information battle. They start with a project, it's fun at first and then the notifications start piling up, so they start responding faster and that leads to even more notifications.
    There's an odd productivity paradox which applies here which you might have experienced with your email. You reply to 10 emails, you get 15 back. Because efficiency breeds more work, and now somehow you found that the better you do, the worse your life gets.
    So what's going on here? Why are maintainers feeling overwhelmed and why is this a new or interesting problem?
    Well, part of the problem is that more people are using and participating in open source than ever before, so in 2001, when open source in its current form first came onto the scene you were dealing with a population of 200,000 people, if we use Source Forge for an imperfect proxy and today it's 20 million people if we use GitHub as an imperfect proxy. So not only are there more people.  So in 1998, a popular project like Netscape browser saw 200,000 downloads in two weeks and today a popular project Locke Lodash sees 21 million downloads in two weeks. Recognizing this is not apples to apples, but projects are seeing this exponential growth in use, but on the production side, it turns out there there's been little to no increase in the number of people maintaining these projects and so you fast forward to 2017, and two-thirds of popular projects on GitHub still only have one or two maintainers, and to some extent a software project can absorb that kind of growth. If those users never interact with the project and they took the software and they quietly ran off into the sunset, everything might be OK, but you know that's not the case.
    Part of what's compounding the problem right now is it's not just random hobby developers who are using these projects, but big, serious companies, too. Most companies say that they use open source to run their business and as you can see, that number has doubled in just the past five years or so and that number comes from 2015 and in a survey we ran in GitHub this year, we found that 95% of respondents say they use open source. So now you've got not just a random developer but a Fortune 500 company demanding you to fix things.
    Example of how this goes wrong is a the recent Equifax security breach which they blamed on an open source project that they rely on which for the record, Equifax had failed to patch on time, but that kind of headline or the potential for that kind of headline, that can cause a lot of mental burden for maintainers. 
    So with an unprecedented number of users flooding these open source projects with little to no increase in maintainer support. As a result, maintainers are feeling like victims of their own success.
    So before I dive deep into this, I just want to take a step back and talk about what an open source maintainer is since I'm going to keep using the term and we're all coming in here with different ideas and definitions. So for the purposes of this talk I'm defining maintainers as the people responsible for an open source project who are having to do something besides writing code so if you're reviewing other people's contributions, answering issues, anything like that. And the maintainer role is really important in open source projects, even if there aren't a lot of them. To illustrate this concept I'm going to borrow an idea from concentration biology called keystone species. So in conservation biology a keystone species has a disproportionately large effect on its environment relative to its size. So for example, if you imagine a forest, there might not be that many wolves in absolute numbers, but if those wolves went away, the deer population would go unchecked and if you had too many deer, that would affect the foliage and so on. So those are keystone species. Both users and contribute torsion need things from maintainers.
    Project might have hundreds of contributors. But if you remove the maintainers, even if there's just a couple of them, you put the whole project in jeopardy.
    So that's why maintainers are important. Without them you've got unanswered issues, unmerged PRs and dead or stagnant projects.
    So we're placing a lot of demand on maintainers these days and the short-term response has been a bunch of these coping strategies, stuff like limiting your time on open source, getting better at saying no, adding friction. Right now we're calling these best practices, but they're basically coping strategies and they're kind of a defensive tactic.
    And if all else fails, maintainers aren't physically handcuffed to their projects, either. Open source software is provided as is, so they're under no obligation, really to maintain anything at all. Part of the coping strategy is also making it easier for maintainers to hand off their projects and walk away if the work gets to be too much. So all of that is fine and good. I could spend the rest of this talk just breaking down those strategies and that in itself is an important area in work. But perhaps a certain thought that is occurred to you, which is wait a second, isn't this open source? Sure, we can talk about helping maintainers learn how to cope, but isn't part of the work also just getting more people to pitch in?
    To which I would say yes, the production level that we've all been told to believe is that open source is all about contributing back, but as we've just learned, most projects curiously only have one or two maintainers. So the interesting question to consider is given what we believe about how open source works, why aren't there more maintainers? Why hasn't maintenance scaled beyond these one or two people? Isn't the system supposed to just magically work itself out?
    So to answer that question, we have to briefly revisit where these assumptions came from in the first place. Why do we actual believe that users will become contributors and contributors will become maintainers?
    So summer 2001, where Steve Ballmer called Linux a cancer and 2016 where he changed his mind, we can probably say that open source won. Early 2000s put open source on the map right after the dot-com bubble. And open source actually started to standardize into a set of norms that we see today. And then today, we see Ballmer saying he not only loves open source now, but Microsoft saying it is using open source and it's hiring. So if 2016 is the period of time we're talking about, the world has changed quite a bit. In the early 2000s, the battle was being many fought between closed and open source. In the cathedral and the bazaar, in his essay. Meaning not just closed source software, but even open source software being built by just a few people. Instead he proposed the bazaar, ... ... Being reviewed by hundreds of people, not just one or two. The cathedral and the bazaar was right for its time. But today it is more like the hangover after a party where we have to come to terms with what we've done.
    [laughter]
    
    The challenges we face today weren't part of the earlier narrative of open source, because it was written in a very different time. Most of the seminal research about how open source gets produced was written in the early 200s, and that became everything we operate from today.
    It's sort of pricing that these researchers were willing to overlook ... which made researchers less likely to question the motivations of people that just seemed kind of different from them in every other way.
    Whatever the case, these days we're dealing with a completely different universe. Today, GitHub adds more new projects per month than source added during its entire lifetime.
    We had never put projects the stress test of scalability. People had no idea what was going to happen when we got to this point. It turns out maintenance doesn't actually grow with use. You fast forward a few years and open source kind of ended up looking like this. There is no bazaar. There's just a couple of people struggling to manage a bazaar-sized workload.
    2014 analysis by Bocoup found that 93% of NPM packages from no containers. And so the big question for today is it's not how do we we more people to use open source. Because open source is already the cultural default. The new question is how do we scale the production model to meet this level of demand?
    There's a lot at stake here. To bring back to keystone species, I kind of see maintainers as the polar bears of pull requests. The ice is shrinking every day. The scary part is that these problems are only going to get worse for a couple of reasons.
    Firstly, they're way more software developers today than there were in 2001, many of whom are new to this work. While it's probably good in the short term in the long term and medium term not only is it going to increase demand, but new users are going to be hesitant to make contributions. This experience for example puts a lot of strain on maintainers. But even if we overcome those challenges, which I think are surmountable, the size and the scope of open source projects themselves are changing.
    Software is fragmenting. We increasingly see more small or mediumish projects with one maintainer working across any of them. Each project doesn't necessarily have its own community anymore. That's a fundamentally different spread from this big ecosystem with a robust community like Linux has, those big ecosystems will always exist. Today's version might be something like Node, the kind of project that creates more opportunities for more projects to exist and in those situations, yes, maximizing can work pretty well in terms of scaling to demand. But while those projects capture our hearts as examples of the bazaar in action, it turns out that they are actually the exception.
    There was a 2015 analysis of the most popular projects on GitHub ... ... on the other hand, they had twice as many examples, so still only 6%, but twice as many that had less than 10 contributors ever. Most popular projects were somewhere in the 10 to 250 contributor range at the time but the point being that these really big bazaars don't represent the normal experience even if they are the most mythologically captivating and again, these are all-time contributions, so when the researchers dug deeper, they found that most people only contributed once and then never again and it's less than 2%. So you had this very long tail of very small contributions. You might have hundreds of total contributors, but the bulk of daily work is still being carried by just a few people. They may be part of a larger ecosystem but they aren't directly associated with it. Some of them are too complex even if people need to keep using and benefiting from them.
    And owe so if fragmentation is a software pattern that we are getting used to, then we need to rethink the production model behind it. Some of them is resolvable in how products are set up. Sharing information and tooling across projects, for example, but part of it is reorienting how we think about a product's contributors. The vast majority of one-time contributors didn't tomorrow there to join a community. We know that because researchers have asked them. They were there to fix a problem once and then move on and in fact that long tail of people does make nontrivial contributions. It's good when they're there and when they're not burdensome to manage, maintainers seem to like them and yes, some of those contributors might get excited about the project and they might want to stick around be and those are the stories that we hear about. What I'd like to propose is that maybe it's OK that they don't stick around. Our expectations of what these contributors are, or what they should be, is not rooted in reality. Most of the rhetoric around contributor communities works really well for big projects, it just doesn't reflect the experience of smaller ones.
    Today, open source is doing an increasingly good job of catering to first-time contributions. This kind of work revolves around making your project welcoming, writing clear documentation, setting up tests, being responsive. These things do help attract new contributors, not to mention just making it a positive and pleasant experience for everyone, but ask a maintainer how well those first-time contributions are translating into repeat contributors and they'll sort of furrow their brow and say well, it's not getting those first contributions that is a problem, but turning a first-time contributor into a second-time contributor. Over and over again, I hear maintainers wrestle with this feeling of guilt. They might personally spend countless hours in hopes that one of them will stick around. Sometimes, none of them do.
    This is hugely emotionally taxing it. Also comes at the expense of other valuable project work. Many maintainers I've spoken to have found that the way they actually get people to stick around is by building relationships. What if we're just telling overburdened maintainers to optimize for a solution that doesn't actually lead to more help?
    And what does it cost maintainers to pursue a strategy that doesn't work? I worry that the rhetoric of the bazaar makes it hard to talk openly about these failures. At some point when we're not seeing the results we want, we might want to try a different tactic.
    Casual contributions are a great way to build a wide volunteer base and encourage growth of a project. This is similar to employer contribution matching programs or people who raise money to run a charity marathon or a bunch of coworkers getting together to volunteer at a soup kitchen. It's less about the money and more about community engagement. But who pays the people who run the soup kitchen? Who pays the staff that organize the marathon? We shouldn't conflate one sustainability problem for another. Contributors will always form the heart of a community but they're simply not a path for reducing overhead. We still need to figure out how to support maintenance work. I want to challenge the expectation that most volunteers why just maintainers waiting to happen.
    I want to challenge the idea that the contribution funnel is just broken and if we somehow manage to fix it all of the maintainers' problems would just go away.
    And to some extent we intuitively know this. You've probably experienced some version of this problem at work, also known as too many cooks in the kitchen. Adding lots of people to a project can slow down a project even more, due to ramp-up time for additional contributors, coordination costs. And limited ability of some tasks. It's not always easy to carve off tasks for contributors.
    Eric Wayman explicitly challenged -- I still think there's some truth here.
    If you're not yet convinced, I would ask this: What does it cost us, everybody in this room, as users and beneficiaries of this software, to pursue the wrong strategy? What could the world look like if we weren't expecting maintainers to burn out and step down, if you weren't asking them to choose between writing code and onboarding new contributors, if they had the resources to be able to do both? This is a world I want to explore. It's natural for us to prioritize solutions that are right in front of us because those are the areas where we feel we have the most control. It's a lot easier than imagining entire paradigm shifts, but if we could look ahead, beyond solving for the immediate short-term burden and design for a future that's maybe three to five years away, we might find we can create something really beautiful. As an example, it turns out one of the hottest buzzword spaces right now is experiencing the same problem. Fred Ehrsam said, everybody including the users misses out.
    This is a quote from Jeff H of Cloudera, that says the best minds of the generations are figuring out how to make people click ads. Sometimes when I think about the information costs that all of us spend in our work, I think about how the best minds of our generation are being spent checking email. Checking notifications, being responsive to other people's needs instead of proactively creating other things. That's a problem I think we can all create to. And by giving open source the resources of being proactive and not just reactive, we can open a whole new world of creation. So let's maintain a thought that maybe sustainability isn't about getting people to contribute. But by maintaining them themselves.
    To answer that I'm going to wrap up this talk that I notice conveniently all start with I. Independence, indirect and. So the first one is indirect. Something encouraging all employees to work on open source during the day. Sometimes open source can be a hobby but it shouldn't have to be. So if there are projects employees use that they could be contributing back to and as we know that's true for 94 percent of you, I would encourage you to advocate for that internally. As things stand today, carving off work today is probably the most realistic approach. Henny Zhu is one of Babel's maintainers, and he was spending all of his time on that work. Now he spends 50% of his time at work on Babel. If you're interested in doing something similar I'll point to you the program that my colleague put together, open source Friday ...: The second still viable today but it's a bit harder to implement strategy is to raise money independently for open source work. There are two paths that are frequently discussed here. First is starting an actual business around the project. There are a lot of strategies that we can charge but, but it's usually either services, paying for extra features, or paying for a permissive, commercially friendly license. Monetizing open source is still hard to do, not to manage risky. There aren't a lot of projects that have done it successfully, and I don't think it works for every project but it's one more option to consider. The other way to think about raising money is through sponsorships. Some projects have done this really well and I think there are a few different parameters here to consider. You could do a one-time raise like through Kickstarter, or an ongoing raise through. Patreon. In any case, getting sponsors requires a bit of community chops and again success in this realm really depends on the individual project and the people that use it. I think there will be a lot of opportunity for intermediary platforms for helping to make this easier. I personally probably hear about a new initiative every week now and that wasn't true two years ago so while it's still early I'm excited to see where this all goes.
    If you're interested in learning more about this topic, I put together a list of all the ways I personally know of that people get paid for open source work with examples and case studies of each and it lives in that repo and I encourage you to check it out.
    So finally, just zooming like way out on the problem, I think the long-term solution here is to start treating open source like digital infrastructure. What does that mean? It means not thinking on a per-project or per-maintainer basis. Right now, there are a bunch of these one-off get lucky success stories, but if you're getting knowledge that everyone relies on open source now and it's this hugely impactful public good, we should be able to attract and maintain talented people to work on it instead of thinking it's a hobby. And if you think that's unrealistic, you might be interested to learn that another form of service didn't really exist until after the industrial revolution. The people who made a lot of money in that time like the Carnegies and Rockefellers ... so you can imagine there's a similar idea here of people who've made billions of dollars who might feel compelled to figure out how to support it long term. How do we get there? The space is still really new, so your guess is as good as mine, but I will leave you with a few ideas inspired by observations I've made about the history of physical infrastructure, like roads and bridges. So if we take the national highway system as an example and how it came about in the US and the UK, roads were being built by local volunteers and local governments for decades and so that meant you had these really poorly maintained roads of varying quality and it was hard to get from Point A to Point B in any satisfactory fashion. What finally happened was having a story of risk and a story of opportunity. The risk story is it one of you might be familiar with, around military defense and preparedness, as well as avoiding local government corruption. Similarly, we have this emerging narrative right now around open source sustainability that's all about these risks, burned out maintainers, unmaintained projects, major security risks. Funnily enough there is even a similar story about this with roads where engineers were being burned out by local politics. So it's important to have a story of risk, but I think it's just as important to have a story opportunity. When it comes to physical infrastructure, better roads came as a result of rise in land travel and after cars reached a consumer market. People finally fixed the roads because they were excited about a trade in commerce and they needed better tools to get around and I think we have a similar story about digital infrastructure. Why do these projects matter? It matters because we want to build good software because software has created enormous social and economic value and it helps society to do more things, but to get there we need reliable tools to build with and that's why sustaining open source matters.
    Where digital infrastructure doesn't look like physical infrastructure is in how it gets built. Open source is very global and it's also decentralized which is a good thing. We want open source to be community built. You wouldn't want one nation state or one large company dictating how it should be built and what it looks like. But that also means there's no entity that can take responsibility for its long-term growth. It also means that the value is hard to quantify. We actually don't know who uses these projects unless companies voluntarily disclose it.
    There's a bit of insanity to maintain a project that you know is being widely used by major companies or governments but you don't actually quite know who is out there so there are these unique challenges in figuring out how to quantify the value. If you can't quantify it then it's also hard to tell a story about why it's important. The way I think about this is open source is a market already. There's value being traded between actors of different interests, right but it's an unpriced market and we need to figure out how to assign value of it. Not because we can exploit it, but if we don't value it, it will be infinitely harder to value maintainers' work so it might take us a few years to get to this infrastructure part, but I think we'll get there. It's pretty terrifying, but it's also a great opportunity. We have no idea how to sustain or accurately price digital infrastructure, given these unique challenges around globalization, decentralization and information transparency. But and if nothing else, I hope to challenge you and myself to think bigger about this opportunity. To think beyond palliative care and coping strategies for maintainers. When you look at the numbers and how rapidly things are changing, it becomes pretty clear that there's a complex and critically important ecosystem forming here. Just like any ecosystem when new environmental threats are introduced, in order to find equilibrium again, it needs to evolve. We need to change our expectations how open source is managed in a world like today. Thank you.
    [applause]
